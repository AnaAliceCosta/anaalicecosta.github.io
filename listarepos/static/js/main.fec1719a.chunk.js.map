{"version":3,"sources":["Componentes/RepositorioItem.js","Componentes/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["RepositorioItem","className","this","props","nome","estrelas","Component","Formulario","onSubmit","for","name","type","text","onChange","value","React","App","pesquisaRepos","evt","preventDefault","fetch","state","usuario","then","repositorios","json","setState","erro","listaRepositorios","forEach","repositorio","push","stargazers_count","catch","preencheUsuario","target","style","display","texto","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAGqBA,G,uLAEb,OACI,wBAAIC,UAAU,QAEV,0BAAMA,UAAU,QAAQC,KAAKC,MAAMC,MACnC,0BAAMH,UAAU,YAAYC,KAAKC,MAAME,SAAvC,kB,GAN6BC,cCAxBC,G,6LAEf,OAEA,0BAAMC,SAAUN,KAAKC,MAAMK,UACzB,2BAAOC,IAAI,WAAX,sBACA,2BAAOC,KAAK,UAAUC,KAAK,OACzBC,KAAMV,KAAKC,MAAMS,KACjBC,SAAUX,KAAKC,MAAMU,WAEvB,2BAAOF,KAAK,SAASG,MAAM,mB,GAVKC,IAAMT,YCsE/BU,E,YAlEb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KASRc,cAAgB,SAACC,GACfA,EAAIC,iBACJC,MAAM,gCAAD,OAAiC,EAAKC,MAAMC,QAA5C,WACJC,KAAK,SAAAC,GAAY,OAAIA,EAAaC,SAClCF,KAAK,SAAAC,GACJ,EAAKE,SAAS,CAACC,MAAK,IACpB,IAAIC,EAAoB,GACxBJ,EAAaK,QAAQ,SAAAC,GACnBF,EAAkBG,KAChB,CAAC3B,KAAK0B,EAAYpB,KAChBL,SAASyB,EAAYE,qBAI3B,EAAKN,SAAS,CAACF,aAAcI,MAE9BK,MAAM,SAAAN,GACL,EAAKD,SAAS,CAACC,MAAK,IACpB,EAAKD,SAAS,CAACF,aAAc,QA5Bf,EAgClBU,gBAAiB,SAAChB,GAChB,EAAKQ,SAAS,CAACJ,QAASJ,EAAIiB,OAAOrB,SA/BnC,EAAKO,MAAM,CACTC,QAAQ,GACRE,aAAa,GACbG,MAAK,GALS,E,sEAsChB,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,OAAOmC,MAAQ,CAACC,QAAQnC,KAAKmB,MAAMM,KAAO,QAAQ,SAAjE,0BAEA,kBAAC,EAAD,CACEnB,SAAUN,KAAKe,cACfqB,MAAOpC,KAAKmB,MAAMC,QAClBT,SAAUX,KAAKgC,kBAEjB,6BACE,4CACA,4BACChC,KAAKmB,MAAMG,aAAae,IAAI,SAAAT,GAC3B,OACE,kBAAC,EAAD,CACA1B,KAAQ0B,EAAY1B,KACpBC,SAAWyB,EAAYzB,oB,GAvDnBU,IAAMT,WCMJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.fec1719a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './RepositorioItem.css'\n\nexport default class RepositorioItem extends Component{\n    render(){\n        return(\n            <li className='item'>\n        \n                <span className='nome'>{this.props.nome}</span> \n                <span className='estrelas'>{this.props.estrelas} Estrelas</span>\n            </li>\n        )\n    }\n}","import React from 'react';\nimport './Formulario.css'\n\nexport default class Formulario extends React.Component{\n    render(){\n      return(\n\n      <form onSubmit={this.props.onSubmit}>\n        <label for='usuario'>Usuario do Github:</label>\n        <input name='usuario' type='text' \n          text={this.props.text}\n          onChange={this.props.onChange}\n          />\n        <input type='submit' value='Pesquisar'/>\n      </form>\n      )\n    }\n}","import React from 'react';\nimport RepositorioItem from './Componentes/RepositorioItem';\nimport './App.css';\nimport Formulario from './Componentes/Formulario';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      usuario:'',\n      repositorios:[],\n      erro:false\n\n    }\n  }\n\n  pesquisaRepos = (evt)=>{\n    evt.preventDefault()\n    fetch(`https://api.github.com/users/${this.state.usuario}/repos`)\n    .then(repositorios => repositorios.json())\n    .then(repositorios =>{\n      this.setState({erro:false})\n      let listaRepositorios = []\n      repositorios.forEach(repositorio=> {\n        listaRepositorios.push(\n          {nome:repositorio.name,\n            estrelas:repositorio.stargazers_count}\n          )\n        }\n      )\n      this.setState({repositorios: listaRepositorios})\n    })\n    .catch(erro=> {\n      this.setState({erro:true})\n      this.setState({repositorios: []})\n    });\n  }\n\n  preencheUsuario= (evt)=>{\n    this.setState({usuario: evt.target.value})\n    \n  }\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <div className=\"erro\" style={ {display:this.state.erro ? 'block':'none'} }>usuario Nao encontrado</div>\n\n        <Formulario\n          onSubmit={this.pesquisaRepos}\n          texto={this.state.usuario}\n          onChange={this.preencheUsuario}\n        />\n        <div>\n          <h2>Repositorios</h2>\n          <ul>\n          {this.state.repositorios.map(repositorio=>{\n            return(\n              <RepositorioItem\n              nome = {repositorio.nome}\n              estrelas= {repositorio.estrelas}/>\n            \n            )\n          })}\n\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}